{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","handleButtonClicked","setState","this","props","event","className","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAsCeA,G,kNAhCbC,MAAQ,CACNC,aAAa,G,EAGfC,oBAAsB,WACf,EAAKF,MAAMC,YAMd,EAAKE,SAAS,CACZF,aAAa,IANf,EAAKE,SAAS,CACZF,aAAa,K,uDAUT,IAAD,OACWG,KAAKC,MAAfC,MACR,OACA,sBAAKC,UAAU,QAAf,UACE,oBAAIA,UAAU,YACd,mBAAGA,UAAU,gBACb,mBAAGA,UAAU,SACb,mBAAGA,UAAU,aACb,mBAAGA,UAAU,aACb,wBAAQA,UAAU,UAAUC,QAAS,kBAAM,EAAKN,gC,GA5BlCO,cCcLC,E,uKAdH,IACAC,EAAWP,KAAKC,MAAhBM,OACR,OACE,oBAAIJ,UAAU,YAAd,SACGI,EAAOC,KAAI,SAAAN,GAAK,OACjB,6BACE,cAAC,EAAD,CAAOA,MAAOA,KADPA,EAAMO,a,GANCJ,aC2CTK,E,4MA1Cbd,MAAQ,CACNe,MAAO,GACPC,YAAa,I,EAGfC,mBAAqB,SAACX,GACpB,IAAMY,EAAQZ,EAAMa,OAAOD,MACrBF,EAAc,EAAKX,MAAMe,UAAUC,QAAO,SAACC,GAC/C,OAAOA,EAASC,cAAcC,QAAQN,EAAMK,gBAAkB,KAEhE,EAAKpB,SAAS,CAAEY,MAAOG,EAAOF,iB,EAGhCS,kBAAoB,SAACC,GACnB,EAAKvB,SAAS,CACZY,MAAOW,K,uDAID,IAAD,OACP,OACE,sBAAKnB,UAAU,aAAf,UACE,uBACEoB,KAAK,OACLpB,UAAU,OACVW,MAAOd,KAAKJ,MAAMe,MAClBa,SAAUxB,KAAKa,qBAEjB,qBAAIV,UAAU,cAAd,UACGH,KAAKJ,MAAMgB,YAAYJ,KAAI,SAACc,GAAD,OAC1B,oBAAqBlB,QAAS,kBAAM,EAAKiB,kBAAkBC,IAA3D,SACEA,GADOA,MAGX,6BACE,gDADM,OALV,c,GA9BiBjB,aCyBVoB,E,4MAvBb7B,MAAQ,CACNe,MAAO,M,EAGTE,mBAAqB,SAACX,GACpB,IAAMY,EAAQZ,EAAMa,OAAOD,MAC3B,EAAKf,SAAS,CAAEY,MAAOG,K,uDAIvB,OACE,qBAAKX,UAAU,iBAAf,SACE,uBACEoB,KAAK,OACLpB,UAAU,cACVW,MAAOd,KAAKJ,MAAMe,MAClBa,SAAUxB,KAAKa,2B,GAlBIR,aCoBdqB,E,uKAXX,OACA,sBAAKvB,UAAY,MAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAPYE,aCGEsB,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a539c076.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport EventList from './EventList';\nimport { mockData } from './mock-data';\n\nclass Event extends Component {\n\n  state = {\n    showDetails: false,\n  }\n\n  handleButtonClicked = () => {\n    if (!this.state.showDetails) {\n      this.setState({\n        showDetails: true,\n      })\n    }\n    else {\n      this.setState({\n        showDetails: false,\n      })\n    }\n  }\n\n  render() {\n    const { event } = this.props;\n    return (\n    <div className='event'>\n      <h2 className='summary'></h2>\n      <p className='description'></p>\n      <p className='time'></p>\n      <p className='timezone'></p>\n      <p className='location'></p>\n      <button className='details' onClick={() => this.handleButtonClicked()}></button>\n    </div>\n    )\n  }\n}\n\nexport default Event;\n","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  render() {\n    const { events } = this.props;\n    return (\n      <ul className='EventList'>\n        {events.map(event => \n        <li key={event.id}>\n          <Event event={event} />\n        </li>\n        )}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n\n  state = {\n    query: '',\n    suggestions: []\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    });\n    this.setState({ query: value, suggestions, });\n  }\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion\n    });\n  }\n \n  render() {\n    return (\n      <div className='CitySearch'>\n        <input \n          type='text'\n          className='city'\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n        />\n        <ul className='suggestions'>\n          {this.state.suggestions.map((suggestion) => (\n            <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}\n            >{suggestion}</li>\n          ))}\n          <li key='all'>\n            <b>See all cities</b>\n          </li>;\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n\n  state = {\n    query: '32',\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ query: value });\n  }\n\n  render() {\n    return (\n      <div className='NumberOfEvents'>\n        <input\n          type='text'\n          className='eventNumber'\n          value={this.state.query}\n          onChange={this.handleInputChanged}>\n        </input>\n      </div>\n    )\n  }\n}\n\nexport default NumberOfEvents;","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport Event from './Event';\nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component {\n  render() {\n    return ( \n    <div className = 'App' >\n      <CitySearch />\n      <EventList />\n      <Event />\n      <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}