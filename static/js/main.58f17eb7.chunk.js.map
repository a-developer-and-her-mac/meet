{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","mock-data.js","api.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","handleButtonClicked","setState","event","this","props","className","summary","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","handleItemClicked","suggestion","updateEvents","type","onChange","NumberOfEvents","mockData","kind","etag","status","htmlLink","created","updated","description","creator","email","self","organizer","start","dateTime","timeZone","end","recurringEventId","originalStartTime","iCalUID","sequence","reminders","useDefault","extractLocations","Set","getEvents","a","App","then","locationEvents","mounted","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58f17eb7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n  state = {\n    showDetails: false,\n  }\n\n  handleButtonClicked = () => {\n    if (!this.state.showDetails) {\n      this.setState({\n        showDetails: true,\n      })\n    }\n    else {\n      this.setState({\n        showDetails: false,\n      })\n    }\n  }\n\n  render() {\n    const { event } = this.props;\n    return (\n    <div className='event'>\n      <h2 className='summary'>{event.summary}</h2>\n      <p className='description'></p>\n      <p className='time'></p>\n      <p className='timezone'></p>\n      <p className='location'></p>\n      <button className='details' onClick={() => this.handleButtonClicked()}></button>\n    </div>\n    )\n  }\n}\n\nexport default Event;\n","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  render() {\n    return (\n      <ul className='EventList'>\n        {this.props.events.map(event => \n        <li key={event.id}>\n          <Event event={event} />\n        </li>\n        )}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n\n  state = {\n    query: '',\n    suggestions: []\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    });\n    this.setState({ query: value, suggestions, });\n  }\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion\n    });\n\n    this.props.updateEvents(suggestion);\n  }\n \n  render() {\n    return (\n      <div className='CitySearch'>\n        <input \n          type='text'\n          className='city'\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n        />\n        <ul className='suggestions'>\n          {this.state.suggestions.map((suggestion) => (\n            <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}\n            >{suggestion}</li>\n          ))}\n          <li key='all' onClick={() => this.handleItemClicked('all')} >\n            <b>See all cities</b>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n\n  state = {\n    query: '32',\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ query: value });\n  }\n\n  render() {\n    return (\n      <div className='NumberOfEvents'>\n        <input\n          type='text'\n          className='eventNumber'\n          value={this.state.query}\n          onChange={this.handleInputChanged}>\n        </input>\n      </div>\n    )\n  }\n}\n\nexport default NumberOfEvents;","const mockData = [\n  {\n  kind: 'calendar#event',\n  etag: '\"3181161784712000\"',\n  id: '4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z',\n  status: 'confirmed',\n  htmlLink: 'https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\n  created: '2020-05-19T19:17:46.000Z',\n  updated: '2020-05-27T12:01:32.356Z',\n  summary: 'Learn JavaScript',\n  description: 'Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.',\n  location: 'London, UK',\n  creator: {\n    email: 'fullstackwebdev@careerfoundry.com',\n    self: true\n  },\n  organizer: {\n    email: 'fullstackwebdev@careerfoundry.com',\n    self: true\n  },\n  start: {\n    dateTime: '2020-05-19T16:00:00+02:00',\n    timeZone: 'Europe/Berlin'\n  },\n  end: {\n    dateTime: '2020-05-19T17:00:00+02:00',\n    timeZone: 'Europe/Berlin'\n  },\n  recurringEventId: '4eahs9ghkhrvkld72hogu9ph3e',\n  originalStartTime: {\n    dateTime: '2020-05-19T16:00:00+02:00',\n    timeZone: 'Europe/Berlin'\n  },\n  iCalUID: '4eahs9ghkhrvkld72hogu9ph3e@google.com',\n  sequence: 0,\n  reminders: {\n    useDefault: true\n  }\n  },\n  {\n  kind: 'calendar#event',\n  etag: '\"3181159875584000\"',\n  id: '3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z',\n  status: 'confirmed',\n  htmlLink: 'https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\n  created: '2020-05-19T19:14:30.000Z',\n  updated: '2020-05-27T11:45:37.792Z',\n  summary: 'React is Fun',\n  description: 'Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. ',\n  location: 'Berlin, Germany',\n  creator: {\n    email: 'fullstackwebdev@careerfoundry.com',\n    self: true\n  },\n  organizer: {\n    email: 'fullstackwebdev@careerfoundry.com',\n    self: true\n  },\n  start: {\n    dateTime: '2020-05-20T14:00:00+02:00',\n    timeZone: 'Europe/Berlin'\n  },\n  end: {\n    dateTime: '2020-05-20T15:00:00+02:00',\n    timeZone: 'Europe/Berlin'\n  },\n  recurringEventId: '3qtd6uscq4tsi6gc7nmmtpqlct',\n  originalStartTime: {\n    dateTime: '2020-05-20T14:00:00+02:00',\n    timeZone: 'Europe/Berlin'\n  },\n  iCalUID: '3qtd6uscq4tsi6gc7nmmtpqlct@google.com',\n  sequence: 0,\n  reminders: {\n    useDefault: true\n  }\n  }\n];\n\nexport { mockData };","import { mockData } from './mock-data';\n\nexport const extractLocations = (events) => {\n  var extractLocations = events.map((event) => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n\nexport const getEvents = async () => {\n  return mockData;\n};","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport Event from './Event';\nimport NumberOfEvents from './NumberOfEvents';\nimport { extractLocations, getEvents } from './api';\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: []\n  }\n\n  updateEvents = (location) => {\n    getEvents().then((events) => {\n      const locationEvents = (location === 'all') ? \n        events : \n        events.filter((event) => event.location === location);\n      this.setState({\n        events: locationEvents\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then((events) => {\n      if (this.mounted) {\n        this.setState({\n          events: events, locations: extractLocations(events)\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n    return ( \n    <div className = 'App' >\n      <CitySearch locations={this.state.locations} updateEvents={this.updateEvents}/>\n      <EventList events={this.state.events} />\n      <Event />\n      <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}